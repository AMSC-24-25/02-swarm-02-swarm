# -*- coding: utf-8 -*-
"""plot_benchSA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14esSLhMvkHTUV9eTDLzl0qYQSBsA0lye
"""

import matplotlib.pyplot as plt

# Hardcoded benchmark data: (threads, max_iterations, iterations_per_sec, real_time_ns)
data = [
    (1, 200, 1322.39, 1.84715e+08),
    (2, 200, 5884.62, 3.94271e+07),
    (4, 200, 26879.9, 1.00592e+07),
    (8, 200, 95033.1, 2.18612e+06),
    (1, 512, 1279.57, 3.87566e+08),
    (2, 512, 5395.0, 1.07476e+08),
    (4, 512, 23997.5, 2.42884e+07),
    (8, 512, 91065.9, 5.58132e+06),
    (1, 1000, 1773.4, 5.6389e+08),
    (2, 1000, 6200.22, 1.87463e+08),
    (4, 1000, 20263.1, 4.46402e+07),
    (8, 1000, 96681.6, 1.11428e+07),
    (1, 2000, 1781.39, 1.12272e+09),
    (2, 2000, 5648.28, 3.20118e+08),
    (4, 2000, 22681.1, 8.72743e+07),
    (8, 2000, 98017.8, 2.05259e+07),
]

# Organize data by max_iterations
results_by_iter = {}
for threads, max_iter, ips, real_time_ns in data:
    if max_iter not in results_by_iter:
        results_by_iter[max_iter] = {'threads': [], 'ips': [], 'time_s': []}
    results_by_iter[max_iter]['threads'].append(threads)
    results_by_iter[max_iter]['ips'].append(ips)
    results_by_iter[max_iter]['time_s'].append(real_time_ns * 1e-9)  # convert ns to s

# Plot 1: Iterations per Second vs Threads
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
for max_iter, vals in sorted(results_by_iter.items()):
    plt.plot(vals['threads'], vals['ips'], marker='o', label=f'{max_iter} iterations')
plt.title('Iterations per Second vs Threads')
plt.xlabel('Threads')
plt.ylabel('Iterations/s')
plt.xticks([1, 2, 4, 8])
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title='Max Iterations')

# Plot 2: Real Time vs Threads
plt.subplot(1, 2, 2)
for max_iter, vals in sorted(results_by_iter.items()):
    plt.plot(vals['threads'], vals['time_s'], marker='o', label=f'{max_iter} iterations')
plt.title('Real Time vs Threads')
plt.xlabel('Threads')
plt.ylabel('Time (s)')
plt.xticks([1, 2, 4, 8])
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title='Max Iterations')

plt.suptitle('Simulated Annealing Benchmark Results')
plt.tight_layout()
plt.show()